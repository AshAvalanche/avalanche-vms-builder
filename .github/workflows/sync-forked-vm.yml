---
name: Sync and build forked VM

on:
  workflow_call:
    secrets:
      githubPat:
        required: true
    inputs:
      vmName:
        required: true
        type: string
      vmForkRepo:
        required: true
        type: string
      vmSourceRepo:
        required: true
        type: string
      buildCommand:
        required: true
        type: string
      buildArchive:
        required: true
        type: string

jobs:
  get-missing-releases:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.get_missing_releases.outputs.releases }}
    steps:
      - name: Sync fork repository with source
        run: gh repo sync ${{ inputs.vmForkRepo }} --source ${{ inputs.vmSourceRepo }}
        env:
          GITHUB_TOKEN: ${{ secrets.githubPat }}

      - name: Get missing releases in fork repository
        id: get_missing_releases
        run: |
          source_releases=$(curl -s https://api.github.com/repos/${{ inputs.vmSourceRepo }}/releases | jq '.[].tag_name' | jq -sc)
          fork_releases=$(curl -s https://api.github.com/repos/${{ inputs.vmForkRepo }}/releases | jq '.[].tag_name' | jq -sc)
          missing_releases=$(jq -nc "$source_releases - $fork_releases")
          echo "::set-output name=releases::$missing_releases"

  create-missing-releases:
    needs: get-missing-releases
    if: fromJSON(needs.get-missing-releases.outputs.releases)[0] != null
    strategy:
      matrix:
        release: ${{ fromJSON(needs.get-missing-releases.outputs.releases) }}
    runs-on: ubuntu-latest
    steps:
      - name: Create missing release
        run: |
          release_title=$(curl -s https://api.github.com/repos/${{ inputs.vmSourceRepo }}/releases | jq -r '.[] | select(.tag_name == "${{ matrix.release }}") | .name')
          release_notes=$(curl -s https://api.github.com/repos/${{ inputs.vmSourceRepo }}/releases | jq -r '.[] | select(.tag_name == "${{ matrix.release }}") | .body')
          gh release create ${{ matrix.release }} -R ${{ inputs.vmForkRepo }} -t "$release_title" -n "$release_notes"
        env:
          GITHUB_TOKEN: ${{ secrets.githubPat }}

  build-vm-releases:
    needs: [get-missing-releases, create-missing-releases]
    if: fromJSON(needs.get-missing-releases.outputs.releases)[0] != null
    strategy:
      matrix:
        release: ${{ fromJSON(needs.get-missing-releases.outputs.releases) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout VM repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.vmForkRepo }}
          path: ${{ inputs.vmForkRepo }}
          ref: ${{ matrix.release }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.16.8"
          check-latest: true

      - name: Build VM
        run: ${{ format(inputs.buildCommand, inputs.vmName, matrix.release) }}
        working-directory: ${{ inputs.vmForkRepo }}

      - name: Compress VM binary to tar.gz
        run: |
          tar -czf ./${{ format(inputs.buildArchive, inputs.vmName, matrix.release) }} \
            ./${{ inputs.vmName }}-${{ matrix.release }}
        working-directory: ${{ inputs.vmForkRepo }}/build

      - name: Compute VM tar.gz SHA-512 checksum
        run: |
          sha512sum ./${{ format(inputs.buildArchive, inputs.vmName, matrix.release) }} \
            > ./${{ format(inputs.buildArchive, inputs.vmName, matrix.release) }}.sha512
        working-directory: ${{ inputs.vmForkRepo }}/build

      - name: Attach VM tar.gz and checksum to release
        run: |
          gh release upload ${{ matrix.release }} -R ${{ inputs.vmForkRepo }} \
            ./${{ format(inputs.buildArchive, inputs.vmName, matrix.release) }} \
            ./${{ format(inputs.buildArchive, inputs.vmName, matrix.release) }}.sha512
        working-directory: ${{ inputs.vmForkRepo }}/build
        env:
          GITHUB_TOKEN: ${{ secrets.githubPat }}

  update-readme:
    needs: [get-missing-releases, build-vm-releases]
    if: fromJSON(needs.get-missing-releases.outputs.releases)[0] != null
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update README.md and push to repository
        run: |
          last_version=$(echo '${{ needs.get-missing-releases.outputs.releases }}' | jq -r 'sort | .[-1]')
          sed -ri "s/(${{ inputs.vmName }}.*)\`v.*\`/\1\`${last_version}\`/" README.md
          git config --global user.name 'AshAvalancheBot'
          git config --global user.email '109693092+AshAvalancheBot@users.noreply.github.com'
          git add README.md
          git commit -m 'docs: update readme with ${{ inputs.vmName }} newest version'
          git push
